package com.zeedlabs.productmanager.crud;

import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import com.zeedlabs.productmanager.crud.entity.Duties;
import com.zeedlabs.productmanager.crud.entity.Staff;

public class CustomUserDetails implements UserDetails {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Staff staff;

	public CustomUserDetails(Staff staff) {
		this.staff = staff;
	}
	
	 
public String getfullName() {
		
		return staff.getFirstName()+" "+staff.getLastName();
	}
	
	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		Set<Duties> roles = staff.getRoles();
		List<SimpleGrantedAuthority> authorities = new ArrayList<>();
		
		for(Duties role : roles) {
			authorities.add(new SimpleGrantedAuthority(role.getName()));
		}
		
		return authorities;
	}

	@Override
	public String getPassword() {
		return staff.getPassword();
	}

	@Override
	public String getUsername() {
		return staff.getUsername();
	}

	@Override
	public boolean isAccountNonExpired() {
		return true;
	}

	@Override
	public boolean isAccountNonLocked() {
		return true;
	}

	@Override
	public boolean isCredentialsNonExpired() {
		return true;
	}

	@Override
	public boolean isEnabled() {
		return true;
	}
	
	public boolean hasrole(String roleName) {
		return staff.
	}
}
